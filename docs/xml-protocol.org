#+TITLE Shampoo XML protocol description

| Date        | Author         | Whats changed                                                       |
|-------------+----------------+---------------------------------------------------------------------|
| 11 Dec 2010 | Dmitry Matveev | Original version                                                    |
| 21 Apr 2011 | Dmitry Matveev | A critical fix in protocol                                          |
| 23 Apr 2011 | Dmitry Matveev | Added "namespace" parameter to all class-related requests           |
|             |                | Added "super" and "superspace" parameters to "CompileClass" request |
| 25 Apr 2011 | Dmitry Matveev | Added "classvar" and "poolvar" subnodes to "Class"/"CompileClass"   |
| 27 Apr 2011 | Dmitry Matveev | New format for aggregated responses and requests, etc               |
| 13 May 2011 | Dmitry Matveev | Added "superclass" attribute to "Class" response                    |
| 28 May 2011 | Dmitry Matveev | Added "side" attribute to "Class" request                           |
| 01 Jun 2011 | Dmitry Matveev | Added "side" attribute to "CompileClass" request + details          |
| 09 Jun 2011 | Dmitry Matveev | Authorization & server info requests/responses                      |
| 12 Jun 2011 | Dmitry Matveev | Added '*' support for Method request                                |
| 24 Sep 2011 | Dmitry Matveev | Added a section about authentication mechanism                      |
| 23 Oct 2012 | Dmitry Matveev | Added a note about the "Content-Length:" header                     |
|             |                | Added "RemoveClass" and "RemoveMethod" messages                     |
| 25 Oct 2012 | Dmitry Matveev | More on categories (changes in "CompileMethod" request, added       |
|             |                | "ChangeCategory" and "RemoveCategory" requests                      |

* Overview

Shampoo-XML is a protocol for remote Smalltalk image control & development. It
provides a set of commands that allow to...
  - get a list of namespaces;
  - get a list of classes in namespace;
  - get a list of methods in class (instance side or class side);
  - register a new class with the supplied description (comment, instance/class
    variable names, etc);
  - remove a class;
  - get a source string of a concrete method in a concrete class;
  - compile a supplied source string for a concrete method in a concrete class;
  - evaluate an expression and to get the result.

Shampoo is functioning in a request/response scheme. Client sends a request to
the server and server replies with a response. There are some messages that can
be sent by a server outside of this scheme, i.e. without an appropriate request.

* Authentication

Authentication is mandatory. Shampoo does not allow to request info about/modify
the image without an authentication.

Currently Shampoo uses the classical Pre-Shared Key (PSK) scheme. It means that
an authentication key (a login/password pair) is pre-configured on the server side.

When a client connects to the Shampoo server, the server first sends an *Magic*
message to the client. This message contains a random session-local magic string
(usually a number). Client has to:
1. Calculate an MD5 checksum of the user's password;
2. Concatenate the magic string with the checksum;
3. Calculate an MD5 checksum of this concatenation;
4. Send it back to the server as well with the login in the *Login* message.

Why do we have step 1? Because server does not store the password in the plain
text form, it stores only an MD5 checksum too.


* Basics

** Message structure

Every message sent from or to Shampoo begins a line:
#+BEGIN_EXAMPLE
  Content-Length: XXXX
#+END_EXAMPLE
where XXXX is the length of the message payload. The line is followed with
"\r\n\r\n" characters (i.e. two CRLFs). Then there is the payload data, XXXX bytes
long, followed by CRLF.

** Request structure

#+BEGIN_EXAMPLE
  <request
    id="..."          (1)
    type="..."        (2)
    ...>            
      <...>           (3)
  </request>
#+END_EXAMPLE

  OR

#+BEGIN_EXAMPLE
  <request id="..." type="..." ... />
#+END_EXAMPLE

ID (1) is a numeric value showing the number of the request in the sequence. When
client sends a request with some ID, server should respond with a response of the
same ID.

TYPE (2) identifies a type of a message (see *Requests*). TYPE determines what
will be included into the body of a request (3).

** Response structure

#+BEGIN_EXAMPLE
  <response
    id="..."          (1)
    type="..."        (2)
    ...>
      <...>           (3)
  </response>
#+END_EXAMPLE

OR

#+BEGIN_EXAMPLE
  <response id="..." type="..." ... />
#+END_EXAMPLE

The response structure is similar to a request structure. Response ID (1) must
always match the appropriate request ID, and the response body (3) is determined
by response type (2).

  
* Requests

** Login

*** Description
Provide credentials to server for authorization.

*** Syntax

#+BEGIN_EXAMPLE
  <request id="25" type="Login">
    <creds login="dmitry" magic="1a1dc91c907325c69271ddf0c944bc72" />
  </request>
#+END_EXAMPLE

Magic field is described in the *Authentication* section.

*** Response
In the case of successful authorization server will reply with *Info* response.
The connection will be closed otherwise.

** Namespaces

*** Description
Ask server to send us a list of all the available namespaces in the image

*** Syntax

#+BEGIN_EXAMPLE
  <request id="23" type="Namespaces" />
#+END_EXAMPLE

*** Response
See *Namespaces*

** Classes

*** Description
Ask server to send us a list of all the classes in the concrete namespace

*** Syntax

#+BEGIN_EXAMPLE
  <request id="10" type="Classes" namespace="SomeNamespace" />
#+END_EXAMPLE

*** Response
See *Classes*

** Class

*** Description
Ask server to send us a class description from a concrete namespace

*** Syntax

#+BEGIN_EXAMPLE
  <request id="15" type="Class" namespace="ConcreteNamespace" class="ConcreteClass" side="instance"/>
#+END_EXAMPLE

  SIDE option can have two possible values:
  - "instance" - request for instance-side class information
  - "class"    - the same for the class side.

*** Response
See *Class*

** Categories

*** Description
Ask server to send us a list of all the method categories in the concrete class

*** Syntax

#+BEGIN_EXAMPLE
  <request id="500"
    type="Categories"
    namespace="SomeNamespace"
    class="SomeClass"
    side="instance"
  />
#+END_EXAMPLE

  SIDE option may have two possible values:
  - "instance" - enumerate categories for the instance-side methods of a class;
  - "class"    - the same for the class side.

*** Response
See *Categories*

** Methods

*** Description
Ask server to send us a list of all the methods of the concrete category in the
concrete class.

*** Syntax

#+BEGIN_EXAMPLE
  <request id="500"
    type="Methods"
    namespace="SomeNamespace"
    class="SomeClass"
    side="instance"
    category="some category"
  />
#+END_EXAMPLE

  SIDE option may have two possible values:
  - "instance" - enumerate categories for the instance-side methods of a class;
  - "class"    - the same for the class side.

  CATEGORY option value should exist in the list of categories obtained from
  Categories message. CATEGORY also may be '*', in this case server should return
  all the available methods.

*** Response
See *Methods*

** MethodSource

*** Description
Ask server to send us a source code stirng for a specified method. Method should exist
in the class.

*** Syntax

#+BEGIN_EXAMPLE    
  <request
    id="123"
    type="MethodSource"
    namespace="SomeNamespace"
    class="SomeClass"
    side="instance"
    method="method name"
  />
#+END_EXAMPLE
    
*** Response
See *MethodSource*

** CompileClass

*** Description
Compile a new class. Or recompile it, if the class is already exist.

*** Syntax

#+BEGIN_EXAMPLE
  <request id="80" type="CompileClass" superspace="SuperNamespace" super="SuperClassName" namespace="SomeNamespace" class="SomeClass" side="instance">
      <instvar>one</instvar>
      <instvar>two</instvar>
      <instvar>three</instvar>
      <classvar>classOne</classvar>
      <classvar>classTwo</classvar>
      <classvar>classThree</classvar>
      <poolvar>poolOne</poolvar>
      <poolvar>poolTwo</poolvar>
      <poolvar>poolThree</poolvar>
  </request>
#+END_EXAMPLE

Instance variables must be registered in the class in the order specified by
message.

A class side can also be "compiled", but it is actually a modification, not a
creation of a new class. So some parameters can be omitted in this case:

#+BEGIN_EXAMPLE
  <request id="80" type="CompileClass" namespace="SomeNamespace" class="SomeClass" side="class">
      <instvar>one</instvar>
      <instvar>two</instvar>
      <instvar>three</instvar>
  </request>
#+END_EXAMPLE

The side argument is optional, if not specified, the request will be considered
as an "instance" one.

*** Response
See *OperationalResoponse*

** CompileMethod

*** Description
Ask server to compile a string of code to the specified class.

*** Syntax

#+BEGIN_EXAMPLE
  <request
    id="80"
    type="CompileMethod"
    namespace="SomeNamespace"
    class="SomeClass"
    side="instance"
    category="somecategory">
    sampleCompare: anInteger with: anotherInteger [
        ^ anInteger &gt; anotherInteger
    ]
  </request>
#+END_EXAMPLE

To preserve XML parser from going crazy, all suspicious symbols (such as &, >, <
and others) must be escaped before sending (to &amp; &lt; &gt; etc).

CATEGORY parameter specifies the method's category. If a method has no category,
the CATEGORY value is set to "*".

In GNU Smalltalk, the method's category can be specified in the method's source using
the <category:> pragma. Actually, it is the only way to specify the method's category
with the 3.x syntax. If the method source contains a <category:> pragma and its value
differs from the CATEGORY value, the pragma's value will be used.

*** Response
See *OperationalResponse*

** ChangeCategory

*** Description
Change the category of the selected method.

*** Syntax

#+BEGIN_EXAMPLE
  <request
    id="192"
    type="ChangeCategory"
    namespace="SomeNamespace"
    class="SomeClass"
    side="instance"
    category="category"
    method="selector"
  />
#+END_EXAMPLE

*** Response
See *OperationalResponse*

** RemoveCategory

*** Description
Remove the specified category, mark all methods belonging to the category as
'uncategorized'.

*** Syntax

#+BEGIN_EXAMPLE
  <request
    id="11"
    type="RemoveCategory"
    namespace="SomeNamespace"
    class="SomeClass"
    side="instance"
    category="category"
  /> 
#+END_EXAMPLE

*** Response
See *OperationalResponse*

** RemoveClass

*** Description
Unregister the specified class from the system.

*** Syntax

#+BEGIN_EXAMPLE

  <request id="129" type="RemoveClass" namespace="SomeNamespace" class="SomeClass" />

#+END_EXAMPLE

*** Response
See *OperationalResponse*

** RemoveMethod

*** Description
Remove a method from a class.

*** Syntax

#+BEGIN_EXAMPLE
  <request
    id="33"
    type="RemoveMethod"
    namespace="SomeNamespace"
    class="SomeClass"
    side="instance"
    method="aMethodName:with:args:"
  />
#+END_EXAMPLE

*** Response
See *OperationalResponse*

** DoIt

*** Description
Ask server to evaluate an expression.

*** Syntax

#+BEGIN_EXAMPLE
  <request id="80" type="DoIt">
    Transcript show: 'Hello world'
  </request>
#+END_EXAMPLE

*** Response
See *OperationalResponse*

** PrintIt

*** Description
Ask server to evaluate an expression and to send the result back to us.

*** Syntax

#+BEGIN_EXAMPLE
  <request id="80" type="DoIt">
    Transcript show: 'Hello world'
  </request>
#+END_EXAMPLE

*** Response
See *PrintIt*

* Responses

** OperationalResponse

*** Description
OperationalResponse is a generic response from a server that indicates success or failure.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="80" type="OperationalResponse" status="success" />
#+END_EXAMPLE

STATUS can be "success" or "failure".

** Namespaces

*** Description
The list of all available namespaces.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="23" type="Namespaces">
      <namespace>CSymbols</namespace>
      <namespace>Kernel</namespace>
      ...
  </response>
#+END_EXAMPLE

*** TODO subspaces

** Classes

*** Description
The list of all available classes in the namespace.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="67" type="Classes">
      <class>Object</class>
      <class>SmallInteger</class>
      ...
  </response>
#+END_EXAMPLE

** Class

*** Description
A class description.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="80" type="Class" class="SomeClass" superclass="SuperClass">
      <instvar>one</instvar>
      <instvar>two</instvar>
      <instvar>three</instvar>
      <classvar>classOne</classvar>
      <classvar>classTwo</classvar>
      <classvar>classThree</classvar>
      <poolvar>poolOne</poolvar>
      <poolvar>poolTwo</poolvar>
      <poolvar>poolThree</poolvar>
  </response>
#+END_EXAMPLE

Almost exactly matches CompileClass request.

** Categories

*** Description
The list of all available categories for a concrete class.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="90" type="Categories">
      <category>private</category>
      <category>accessors</category>
      ...
  </response>
#+END_EXAMPLE

** Methods

*** Description
The list of all available methods in a concrete category for a concrete class.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="100" type="Methods" class="SomeClass">
      <method>do:</method>
      <method>inject:into:</method>
      ...
  </response>
#+END_EXAMPLE

** MethodSource

*** Description
A source string for a concrete method in a concrete class.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="100" type="MethodSource" class="SomeClass" method="someMethod">
      someMethod [
          ^100 factorial
      ]
  </response>
#+END_EXAMPLE

As for CompileMethod request, to preserve XML parser from being broken, all
suspicious symbols (such as &, >, < and others) must be escaped before
sending (to &amp; &lt; &gt; etc).

** Info

*** Description
A string with server information. The information contents is backend-dependent, but
usually it is an image/system version.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="25" type="Info">
    GNU Smalltalk version 3.2.3-4f40165
  </response>
#+END_EXAMPLE

** Echo

*** Description

This message contains an output that is being printed on the Transcript. These
notifications are sent to all the connected clients, not only to the one that
has initiated the printing.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="-1" type="Echo">
    Some text here
  </response>
#+END_EXAMPLE

** PrintIt

*** Description

This message contains an output of an expression evaluation.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="44" type="PrintIt">
    Some text here
  </response>
#+END_EXAMPLE
