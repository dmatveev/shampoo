#+TITLE Shampoo XML protocol description

| Date        | Author         | Whats changed                                  |
|-------------+----------------+------------------------------------------------|
| 11 Dec 2010 | Dmitry Matveev | Original version                               |
| 21 Apr 2011 | Dmitry Matveev | A critical fix in protocol                     |
| 23 Apr 2011 | Dmitry Matveev | Added "namespace" parameter to "Class" request |
|             |                | ...and to all other class-related requests     |

* Overview

Shampoo-XML is a protocol for remote Smalltalk image control. It provides a set
of commands that allow to...
  - get a list of namespaces;
  - get a list of classes in namespace;
  - get a list of methods in class (instance side or class side);
  - register a new class with the supplied description (comment, instance/class
    variable names, etc);
  - remove a class;
  - get a source string of a concrete method in a concrete class;
  - compile a supplied source string for a concrete method in a concrete class.

Shampo is functioning in a request/response server. Client sends a request to
the server and server replies with a response. Server will not send anything
to the client without an appropriate request.

* Basics

** Request structure

#+BEGIN_EXAMPLE
  <request
    id=...          (1)
    type=...        (2)
    ...>            
      <...>         (3)
  </request>
#+END_EXAMPLE

  OR

#+BEGIN_EXAMPLE
  <request id=... type=... ... />
#+END_EXAMPLE

ID (1) is a numeric value showing the number of the request in the sequence. When
client sends a request with some ID, server should respond with a response of the
same ID.

TYPE (2) identifies a type of a message (see *Requests*). TYPE determines what
will be included into the body of a request (3).

** Response structure

#+BEGIN_EXAMPLE
  <response
    id=...          (1)
    type=...        (2)
    ...>
      <...>         (3)
  </response>
#+END_EXAMPLE

OR

#+BEGIN_EXAMPLE
  <response id=... type=... ... />
#+END_EXAMPLE

The response structure is similar to a request structure. Response ID (1) must
always match the appropriate request ID, and the response body (3) is determined
by response type (2).
  
* Requests

** Namespaces

*** Description
Ask server to send us a list of all the available namespaces in the image

*** Syntax

#+BEGIN_EXAMPLE
  <request id="23" type="Namespaces" />
#+END_EXAMPLE

*** Response
See *Namespaces*

** Classes

*** Description
Ask server to send us a list of all the classes in the concrete namespace

*** Syntax

#+BEGIN_EXAMPLE
  <request id="10" type="Classes" namespace="SomeNamespace" />
#+END_EXAMPLE

*** Response
See *Classes*

** Class

*** Description
Ask server to send us a class description from a concrete namespace

*** Syntax

#+BEGIN_EXAMPLE
  <request id="15" type="Class" namespace="ConcreteNamespace" class="ConcreteClass" />
#+END_EXAMPLE

*** Response
See *Class*

** Categories

*** Description
Ask server to send us a list of all the method categories in the concrete class

*** Syntax

#+BEGIN_EXAMPLE
  <request id="500"
    type="Categories"
    namespace="SomeNamespace"
    class="SomeClass"
    side="instance"
  />
#+END_EXAMPLE

  SIDE option may have two possible values:
  - "instance" - enumerate categories for the instance-side methods of a class;
  - "class"    - the same for the class side.

*** Response
See *Categories*

** Methods

*** Description
Ask server to send us a list of all the methods of the concrete category in the
concrete class.

*** Syntax

#+BEGIN_EXAMPLE
  <request id="500"
    type="Methods"
    namespace="SomeNamespace"
    class="SomeClass"
    side="instance"
    category="some category"
  />
#+END_EXAMPLE

  SIDE option may have two possible values:
  - "instance" - enumerate categories for the instance-side methods of a class;
  - "class"    - the same for the class side.

  CATEGORY option value should exist in the list of categories obtained from
  Categories message.

*** Response
See *Methods*

** MethodSource

*** Description
Ask server to send us a source code stirng for a specified method. Method should exist
in the class.

*** Syntax

#+BEGIN_EXAMPLE    
  <request
    id="123"
    type="MethodSource"
    namespace="SomeNamespace"
    class="SomeClass"
    side="instance"
    method="method name"
  />
#+END_EXAMPLE
    
*** Response
See *MethodSource*

** CompileClass

*** Description
Compile a new class. Or recompile it, if a class is already exist.

*** Syntax

#+BEGIN_EXAMPLE
  <request id="80" type="CompileClass" namespace="SomeNamespace" class="SomeClass">
      <instvar name="one" />
      <instvar name="two" />
      <instvar name="three" />
  </request>
#+END_EXAMPLE

Instance variables must be registered in the class in the order specified by message.

*** TODO add class variables in the request

*** Response
See *OperationalResoponse*

** CompileMethod

*** Description
Ask server to compile a string of code to the specified class.

*** Syntax

#+BEGIN_EXAMPLE
  <request id="80" type="CompileMethod" namespace="SomeNamespace" class="SomeClass" side="instance">
    sampleCompare: anInteger with: anotherInteger [
        ^ anInteger &gt; anotherInteger
    ]
  </request>
#+END_EXAMPLE

To preserve XML parser from going crazy, all suspicious symbols (such as &, >, <
and others) must be escaped before sending (to &amp; &lt; &gt; etc).

*** Response
See *OperationalResponse*

** TODO RemoveClass

** TODO RemoveMethod

* Responses

** OperationalResponse

*** Description
OperationalResponse is a generic response from a server that indicates success of failure.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="80" type="OperationalResponse" status="success" />
#+END_EXAMPLE

STATUS can be "success" or "failure".

** Namespaces

*** Description
The list of all available namespaces.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="23" type="Namespaces">
      <namespace name="CSymbols" />
      <namespace name="Kernel" />
      ...
  </response>
#+END_EXAMPLE

*** TODO subspaces

** Classes

*** Description
The list of all available classes in the namespace.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="67" type="Classes">
      <class name="Object" />
      <class name="SmallInteger" />
      ...
  </response>
#+END_EXAMPLE

** Class

*** Description
A class description.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="80" type="Class" class="SomeClass">
      <instvar name="one" />
      <instvar name="two" />
      <instvar name="three" />
  </response>
#+END_EXAMPLE

Almost exactly matches CompileClass request.

** Categories

*** Description
The list of all available categories for a concrete class.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="90" type="Categories">
      <category name="private" />
      <category name="accessors" />
      ...
  </response>
#+END_EXAMPLE

** Methods

*** Description
The list of all available methods in a concrete category for a concrete class.

*** Syntax

#+BEGIN_EXAMPLE
  <response
    id="100"
    type="Methods">
      <method name="do:" />
      <method name="inject:into:" />
      ...
  </response>
#+END_EXAMPLE

** MethodSource

*** Description
A source string for a concrete method in a concrete class.

*** Syntax

#+BEGIN_EXAMPLE
  <response id="100" type="MethodSource" class="SomeClass" method="someMethod">
      someMethod [
          ^100 factorial
      ]
  </response>
#+END_EXAMPLE

As for CompileMethod request, to preserve XML parser from being broken, all
suspicious symbols (such as &, >, < and others) must be escaped before
sending (to &amp; &lt; &gt; etc).

